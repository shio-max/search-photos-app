{"version":3,"sources":["Photo.js","App.js","reportWebVitals.js","index.js"],"names":["Photo","username","image","type","url","className","href","src","alt","App","useState","photos","setPhotos","search","setSearch","query","setQuery","useEffect","getPhotos","a","fetch","response","json","data","hits","process","onSubmit","e","preventDefault","value","onChange","target","map","photo","user","webformatURL","largeImageURL","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kSAgBeA,EAbD,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,SAAUC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,IACtC,OACE,sBAAKC,UAAU,aAAf,UACE,mBAAGC,KAAMF,EAAT,SACE,qBAAKG,IAAKL,EAAOM,IAAKL,MAExB,qBAAKE,UAAU,SAAf,SACE,qBAAKA,UAAU,YAAf,SAA4BJ,UCkErBQ,EAxEH,WACV,IADgB,EAIYC,mBAAS,IAJrB,mBAITC,EAJS,KAIDC,EAJC,OAKYF,mBAAS,IALrB,mBAKTG,EALS,KAKDC,EALC,OAMUJ,mBAAS,kBANnB,mBAMTK,EANS,KAMFC,EANE,KAShBC,qBAAU,WACRC,MACC,CAACH,IAGJ,IAAMG,EAAS,uCAAG,8BAAAC,EAAA,sEACOC,MAAM,gCAAD,OAdd,qCAcc,cACmBL,EADnB,sBADZ,cACVM,EADU,gBAIGA,EAASC,OAJZ,OAIVC,EAJU,OAKhBX,EAAUW,EAAKC,MALC,2CAAH,qDAmBf,OACE,sBAAKnB,UAAU,MAAf,UAEE,qBAAKA,UAAU,SAAf,SACE,mBAAGC,KAAK,uBAAR,SACE,qBAAKC,IAAG,UAAKkB,qBAAL,mBAIZ,qBAAKpB,UAAU,eAAf,SACE,uBAAMqB,SAhBM,SAACC,GACjBA,EAAEC,iBACFZ,EAASH,GACTC,EAAU,KAaqBT,UAAU,cAArC,UACE,uBACEF,KAAK,OACLE,UAAU,aACVwB,MAAOhB,EACPiB,SAzBW,SAACH,GACpBb,EAAUa,EAAEI,OAAOF,UA0Bb,yBAAQxB,UAAU,aAAaF,KAAK,SAApC,UACE,mBAAGE,UAAU,kBADf,iBAOJ,sBAAKA,UAAU,SAAf,UACGM,EAAOqB,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,CAEEhC,SAAUgC,EAAMC,KAChBhC,MAAO+B,EAAME,aACbhC,KAAM8B,EAAM9B,KACZC,IAAK6B,EAAMG,eAJNH,EAAMI,OAHjB,WCjDSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7e5e3733.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./photo.css\";\n\nconst Photo = ({ username, image, type, url }) => {\n  return (\n    <div className=\"item-place\">\n      <a href={url}>\n        <img src={image} alt={type}></img>\n      </a>\n      <div className=\"hidden\">\n        <div className=\"hide-info\">{username}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Photo;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Photo from \"./Photo\";\n\nconst App = () => {\n  const API_KEY = \"20279966-ef51efcaa6fd4b1fb2286df56\";\n\n  //State\n  const [photos, setPhotos] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"yellow+flowers\");\n\n  //Effect\n  useEffect(() => {\n    getPhotos();\n  }, [query]);\n\n  //APIの取得\n  const getPhotos = async () => {\n    const response = await fetch(\n      `https://pixabay.com/api/?key=${API_KEY}&q=${query}&image_type=photo`\n    );\n    const data = await response.json();\n    setPhotos(data.hits);\n  };\n\n  //Event\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n  };\n\n  const getSearch = (e) => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch(\"\");\n  };\n\n  return (\n    <div className=\"App\">\n    \n      <div className=\"header\">\n        <a href=\"https://pixabay.com/\">\n          <img src={`${process.env.PUBLIC_URL}/logo.png`} />\n        </a>\n      </div>\n\n      <div className=\"search-place\">\n        <form onSubmit={getSearch} className=\"search-form\">\n          <input\n            type=\"text\"\n            className=\"search-bar\"\n            value={search}\n            onChange={updateSearch}\n          />\n          <button className=\"search-btn\" type=\"submit\">\n            <i className=\"fas fa-search\"></i>\n            Search\n          </button>\n        </form>\n      </div>\n\n      <div className=\"images\">\n        {photos.map((photo) => (\n          <Photo\n            key={photo.id}\n            username={photo.user}\n            image={photo.webformatURL}\n            type={photo.type}\n            url={photo.largeImageURL}\n          />\n        ))};\n      </div>\n\n    </div>\n  );\n};\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}